from qr_reader import *
from main import *

def create_image(mat):
    poza = mat
    color_map = {
        0: (255, 255, 255),  # White
        1: (0, 0, 0),  # Black
        8: (128, 128, 128)  # Gray
    }
    image = Image.new("RGB", (len(poza), len(poza)))
    pixels = image.load()
    for i in range(len(poza)):
        for j in range(len(poza)):
            pixels[j, i] = color_map[poza[i][j]]
    scaling_factor = 50
    new_size = (len(poza) * scaling_factor, len(poza) * scaling_factor)
    upscaled_image = image.resize(new_size, Image.NEAREST)
    upscaled_image.save("DEBUGGING.png")
    upscaled_image.show()

def calculate_version(matrice):
    size = len(matrice)
    ver = (size - 21) // 4 + 1
    return ver

def read_format_bits(matrix):
    marime = len(matrix)
    bitString = ""
    for i in range(7):
        bitString += str(matrix[marime - 1 - i][8])
    for i in range(8):
        bitString += str(matrix[8][marime-8+i])
    bitString = int(bitString,2)
    bitString ^= 0b101010000010010
    bitString = format(bitString, '015b')
    bitString = bitString[:5]

    ECL = int(bitString[:2],2)
    mask_id = int(bitString[2:],2)
    if ECL == 0:
        ECL = "M"
    elif ECL == 1:
        ECL = "L"
    elif ECL == 2:
        ECL = "H"
    else:
        ECL = "Q"

    return ECL, mask_id

def create_template(version):
    size = (version - 1) * 4 + 21
    template = [[8] * size for _ in range(size)]
    draw_finders(template, size)
    draw_alignment_patterns(template, version)
    draw_dummy_format_bits(template, size)
    timing_patterns(template, size)
    draw_version_information(template, version, size)
    return template

def unmask(matrix, mask_id,version,ECL):
    template = create_template(version)
    unmasked_matrix = apply_mask(matrix,mask_id,template,ECL)
    return unmasked_matrix

def get_ECC_blocks(version,ECL):
    nr = 0
    informatii = QR_BLOCK_INFO[version][ECL]
    nr_blocks = informatii[0]
    codewords = 0
    for tuplu in informatii[1]:
        codewords += tuplu[0] * tuplu[1]
    countECC = nr_blocks - codewords
    return countECC

def remove_ECC(bitString,version,ECL):
    ECCbits = get_ECC_blocks(version, ECL)
    bitString = bitString[:-ECCbits]
    return bitString

def create_codeword_matrix(bitString,version,ECL):
    informatii = QR_BLOCK_INFO[version][ECL]
    nr_coloane = 0
    grupuri = len(informatii[1]) #1 sau 2
    nr_randuri = informatii[1][0][1] #te rog nu ma intreba ce face asta...
    for tuplu in informatii[1]:
        nr_coloane += tuplu[0]
    mat_aux = [["0"]*nr_coloane for i in range(nr_randuri+1)]
    string_aux = bitString[::1]
    for i in range(nr_randuri):
        for j in range(nr_coloane):
            if len(bitString) >= 8:
                mat_aux[i][j] = bitString[:8]
                bitString = bitString[8:]
    if grupuri == 2:
        for j in range(informatii[1][0][0], nr_coloane):
            if len(bitString) >= 8:
                mat_aux[nr_randuri][j] = bitString[:8]
                bitString = bitString[8:]

    # for linie in mat_aux:
    #     for x in linie:
    #         print(hex(int(x,2)),end=" ")
    #     print()

    bitString = string_aux[::1]
    return mat_aux

def read_codeword_matrix(matrix):
    linii = len(matrix)
    coloane = len(matrix[0])
    bitString = ""
    for j in range(coloane):
        for i in range(linii):
            if matrix[i][j] != "0":
                bitString += matrix[i][j]
    print(bitString)
    return bitString

def remove_paddings(message, version):
    mode_mapping = {
        "0001": "Numeric",
        "0010": "Alphanumeric",
        "0100": "Byte",
        "1000": "Kanji"
    }
    mode = mode_mapping[message[:4]]
    message = message[4:]
    if mode == "Numeric":
        char_count_bits = 10 if version <= 9 else 12 if version <= 26 else 14
    elif mode == "Alphanumeric":
        char_count_bits = 9 if version <= 9 else 11 if version <= 26 else 13
    elif mode in ["Byte", "Kanji"]:
        char_count_bits = 8 if version <= 9 else 16
    print(char_count_bits)
    char_count = int(message[:char_count_bits], 2)
    message = message[char_count_bits:]
    decoded_message = ""
    for i in range(char_count):
        if mode == "Byte":
            if len(message) < 8:
                break
            c = chr(int(message[:8],2))
            decoded_message += c
            message = message[8:]
    print(decoded_message)
    return decoded_message


def citim_informatia(matrix,version):
    template = create_template(version)
    path = zigzag(template)
    bitString = ""
    for tuplu in path:
        i,j = tuplu
        bitString += str(matrix[i][j])
    return bitString
def return_message(img_path):
    # read_QR(img_path)
    g = open("binary_file.out")
    matrice = [[int(x) for x in linie.split()] for linie in g.readlines()]
    g.close()
    version = calculate_version(matrice)
    ECL, mask_id = read_format_bits(matrice)
    print(version,ECL)
    matrice = unmask(matrice, mask_id, version, ECL)
    message = citim_informatia(matrice,version)
    message = remove_ECC(message,version,ECL)
    message = read_codeword_matrix(create_codeword_matrix(message,version,ECL))
    remove_paddings(message,version)
    return matrice

QR_BLOCK_INFO =  {1: {'L': (19, [(1, 19)]),
'M': (16, [(1, 16)]),
'Q': (13, [(1, 13)]),
'H': (9, [(1, 9)])},
 2: {'L': (34, [(1, 34)]),
 'M': (28, [(1, 28)]),
 'Q': (22, [(1, 22)]),
 'H': (16, [(1, 16)])},
 3: {'L': (55, [(1, 55)]),
'M': (44, [(1, 44)]),
'Q': (34, [(2, 17)]),
'H': (26, [(2, 13)])},
 4: {'L': (80, [(1, 80)]),
'M': (64, [(2, 32)]),
'Q': (48, [(2, 24)]),
'H': (36, [(4, 9)])},
 5: {'L': (108, [(1, 108)]),
'M': (86, [(2, 43)]),
'Q': (62, [(2, 15), (2, 16)]),
'H': (46, [(2, 11), (2, 12)])},
 6: {'L': (136, [(2, 68)]),
'M': (108, [(4, 27)]),
'Q': (76, [(4, 19)]),
'H': (60, [(4, 15)])},
 7: {'L': (156, [(2, 78)]),
'M': (124, [(4, 31)]),
'Q': (88, [(2, 14), (4, 15)]),
'H': (66, [(4, 13), (1, 14)])},
 8: {'L': (194, [(2, 97)]),
'M': (154, [(2, 38), (2, 39)]),
'Q': (110, [(4, 18), (2, 19)]),
'H': (86, [(4, 14), (2, 15)])},
 9: {'L': (232, [(2, 116)]),
'M': (182, [(3, 36), (2, 37)]),
'Q': (132, [(4, 16), (4, 17)]),
'H': (100, [(4, 12), (4, 13)])},
 10: {'L': (274, [(2, 68), (2, 69)]),
'M': (216, [(4, 43), (1, 44)]),
'Q': (154, [(6, 19), (2, 20)]),
'H': (122, [(6, 15), (2, 16)])},
 11: {'L': (324, [(4, 81)]),
'M': (254, [(1, 50), (4, 51)]),
'Q': (180, [(4, 22), (4, 23)]),
'H': (140, [(3, 12), (8, 13)])},
 12: {'L': (370, [(2, 92), (2, 93)]),
'M': (290, [(6, 36), (2, 37)]),
'Q': (206, [(4, 20), (6, 21)]),
'H': (158, [(7, 14), (4, 15)])},
 13: {'L': (428, [(4, 107)]),
'M': (334, [(8, 37), (1, 38)]),
'Q': (244, [(8, 20), (4, 21)]),
'H': (180, [(12, 11), (4, 12)])},
 14: {'L': (461, [(3, 115), (1, 116)]),
'M': (365, [(4, 40), (5, 41)]),
'Q': (261, [(11, 16), (5, 17)]),
'H': (197, [(11, 12), (5, 13)])},
 15: {'L': (523, [(5, 87), (1, 88)]),
'M': (415, [(5, 41), (5, 42)]),
'Q': (295, [(5, 24), (7, 25)]),
'H': (223, [(11, 12), (7, 13)])},
 16: {'L': (589, [(5, 98), (1, 99)]),
'M': (453, [(7, 45), (3, 46)]),
'Q': (325, [(15, 19), (2, 20)]),
'H': (253, [(3, 15), (13, 16)])},
 17: {'L': (647, [(1, 107), (5, 108)]),
'M': (507, [(10, 46), (1, 47)]),
'Q': (367, [(1, 22), (15, 23)]),
'H': (283, [(2, 14), (17, 15)])},
 18: {'L': (721, [(5, 120), (1, 121)]),
'M': (563, [(9, 43), (4, 44)]),
'Q': (397, [(17, 22), (1, 23)]),
'H': (313, [(2, 14), (19, 15)])},
 19: {'L': (795, [(3, 113), (4, 114)]),
'M': (627, [(3, 44), (11, 45)]),
'Q': (445, [(17, 21), (4, 22)]),
'H': (341, [(9, 13), (16, 14)])},
 20: {'L': (861, [(3, 107), (5, 108)]),
'M': (669, [(3, 41), (13, 42)]),
'Q': (485, [(15, 24), (5, 25)]),
'H': (385, [(15, 15), (10, 16)])},
 21: {'L': (932, [(4, 116), (4, 117)]),
'M': (714, [(17, 42)]),
'Q': (512, [(17, 22), (6, 23)]),
'H': (406, [(19, 16), (6, 17)])},
 22: {'L': (1006, [(2, 111), (7, 112)]),
'M': (782, [(17, 46)]),
'Q': (568, [(7, 24), (16, 25)]),
'H': (442, [(34, 13)])},
 23: {'L': (1094, [(4, 121), (5, 122)]),
'M': (860, [(4, 47), (14, 48)]),
'Q': (614, [(11, 24), (14, 25)]),
'H': (464, [(16, 15), (14, 16)])},
 24: {'L': (1174, [(6, 117), (4, 118)]),
'M': (914, [(6, 45), (14, 46)]),
'Q': (664, [(11, 24), (16, 25)]),
'H': (514, [(30, 16), (2, 17)])},
 25: {'L': (1276, [(8, 106), (4, 107)]),
'M': (1000, [(8, 47), (13, 48)]),
'Q': (718, [(7, 24), (22, 25)]),
'H': (538, [(22, 15), (13, 16)])},
 26: {'L': (1370, [(10, 114), (2, 115)]),
'M': (1062, [(19, 46), (4, 47)]),
'Q': (754, [(28, 22), (6, 23)]),
'H': (596, [(33, 16), (4, 17)])},
 27: {'L': (1468, [(8, 122), (4, 123)]),
'M': (1128, [(22, 45), (3, 46)]),
'Q': (808, [(8, 23), (26, 24)]),
'H': (628, [(12, 15), (28, 16)])},
 28: {'L': (1531, [(3, 117), (10, 118)]),
'M': (1193, [(3, 45), (23, 46)]),
'Q': (871, [(4, 24), (31, 25)]),
'H': (661, [(11, 15), (31, 16)])},
 29: {'L': (1631, [(7, 116), (7, 117)]),
'M': (1267, [(21, 45), (7, 46)]),
'Q': (911, [(1, 23), (37, 24)]),
'H': (701, [(19, 15), (26, 16)])},
 30: {'L': (1735, [(5, 115), (10, 116)]),
'M': (1373, [(19, 47), (10, 48)]),
'Q': (985, [(15, 24), (25, 25)]),
'H': (745, [(23, 15), (25, 16)])},
 31: {'L': (1843, [(13, 115), (3, 116)]),
'M': (1455, [(2, 46), (29, 47)]),
'Q': (1033, [(42, 24), (1, 25)]),
'H': (793, [(23, 15), (28, 16)])},
 32: {'L': (1955, [(17, 115)]),
'M': (1541, [(10, 46), (23, 47)]),
'Q': (1115, [(10, 24), (35, 25)]),
'H': (845, [(19, 15), (35, 16)])},
 33: {'L': (2071, [(17, 115), (1, 116)]),
'M': (1631, [(14, 46), (21, 47)]),'Q': (1171, [(29, 24), (19, 25)]),'H': (901, [(11, 15), (46, 16)])},
 34: {'L': (2191, [(13, 115), (6, 116)]),'M': (1725, [(14, 46), (23, 47)]),'Q': (1231, [(44, 24), (7, 25)]),'H': (961, [(59, 16), (1, 17)])},
 35: {'L': (2306, [(12, 121), (7, 122)]),'M': (1812, [(12, 47), (26, 48)]),'Q': (1286, [(39, 24), (14, 25)]),'H': (986, [(22, 15), (41, 16)])},
 36: {'L': (2434, [(6, 121), (14, 122)]),'M': (1914, [(6, 47), (34, 48)]),'Q': (1354, [(46, 24), (10, 25)]),'H': (1054, [(2, 15), (64, 16)])},
 37: {'L': (2566, [(17, 122), (4, 123)]),'M': (1992, [(29, 46), (14, 47)]),'Q': (1426, [(49, 24), (10, 25)]),'H': (1096, [(24, 15), (46, 16)])},
 38: {'L': (2702, [(4, 122), (18, 123)]),'M': (2102, [(13, 46), (32, 47)]),'Q': (1502, [(48, 24), (14, 25)]),'H': (1142, [(42, 15), (32, 16)])},
 39: {'L': (2812, [(20, 117), (4, 118)]),'M': (2216, [(40, 47), (7, 48)]),'Q': (1582, [(43, 24), (22, 25)]),'H': (1222, [(10, 15), (67, 16)])},
 40: {'L': (2956, [(19, 118), (6, 119)]),'M': (2334, [(18, 47), (31, 48)]),'Q': (1666, [(34, 24), (34, 25)]),'H': (1276, [(20, 15), (61, 16)])}}
QR_BLOCK_INFOold = {
#Versiune[ECL] = (nrBlockuri, [block-uri/grup, codewords/block ])
#ECC = Versiune[ECL][0] - codewords
#codewords = (blockuri/grup * codewords/block ) PENTRU FIECARE GRUP!!
#Evident niciunul din comentariile astea nu-s corecte :))
    1: {'L': (26, [(1, 19)]), 'M': (26, [(1, 16)]), 'Q': (26, [(1, 13)]), 'H': (26, [(1, 9)])},
    2: {'L': (44, [(1, 34)]), 'M': (44, [(1, 28)]), 'Q': (44, [(1, 22)]), 'H': (44, [(1, 16)])},
    3: {'L': (70, [(1, 55)]), 'M': (70, [(1, 44)]), 'Q': (70, [(2, 17)]), 'H': (70, [(2, 13)])},
    4: {'L': (100, [(1, 80)]), 'M': (100, [(2, 32)]), 'Q': (100, [(2, 24)]), 'H': (100, [(4, 9)])},
    5: {'L': (134, [(1, 108)]), 'M': (134, [(2, 43)]), 'Q': (134, [(2, 15), (2, 16)]), 'H': (134, [(2, 11), (2, 12)])},
    6: {'L': (172, [(2, 68)]), 'M': (172, [(4, 27)]), 'Q': (172, [(4, 19)]), 'H': (172, [(4, 15)])},
    7: {'L': (196, [(2, 78)]), 'M': (196, [(4, 31)]), 'Q': (196, [(2, 14), (4, 15)]), 'H': (196, [(4, 13), (1, 14)])},
    8: {'L': (242, [(2, 97)]), 'M': (242, [(2, 38), (2, 39)]), 'Q': (242, [(4, 18), (2, 19)]), 'H': (242, [(4, 14), (2, 15)])},
    9: {'L': (292, [(2, 116)]), 'M': (292, [(3, 36), (2, 37)]), 'Q': (292, [(4, 16), (4, 17)]), 'H': (292, [(4, 12), (4, 13)])},
    10: {'L': (346, [(2, 68), (2, 69)]), 'M': (346, [(2, 43), (2, 44)]), 'Q': (346, [(2, 38), (2, 39)]), 'H': (346, [(2, 30), (2, 31)])},
    11: {'L': (404, [(2, 81), (2, 82)]), 'M': (404, [(4, 50)]), 'Q': (404, [(4, 22), (2, 23)]),'H': (404, [(4, 16), (4, 17)])},
    12: {'L': (466, [(2, 92), (2, 93)]), 'M': (466, [(4, 58)]), 'Q': (466, [(4, 26), (4, 27)]),'H': (466, [(4, 22), (4, 23)])},
    13: {'L': (532, [(2, 107), (2, 108)]), 'M': (532, [(4, 64)]), 'Q': (532, [(4, 30), (4, 31)]),'H': (532, [(4, 22), (4, 23)])},
    14: {'L': (581, [(3, 115), (1, 116)]), 'M': (581, [(4, 69), (1, 70)]), 'Q': (581, [(4, 33), (5, 34)]),'H': (581, [(4, 24), (5, 25)])},
    15: {'L': (655, [(5, 87), (1, 88)]), 'M': (655, [(5, 69), (1, 70)]), 'Q': (655, [(5, 30), (5, 31)]),'H': (655, [(5, 24), (5, 25)])},
    16: {'L': (733, [(5, 98), (1, 99)]), 'M': (733, [(7, 56), (1, 57)]), 'Q': (733, [(7, 36), (5, 37)]),'H': (733, [(7, 28), (5, 29)])},
    17: {'L': (815, [(7, 107), (1, 108)]), 'M': (815, [(10, 46), (1, 47)]), 'Q': (815, [(10, 39), (5, 40)]),'H': (815, [(10, 31), (5, 32)])},
    18: {'L': (901, [(10, 120), (1, 121)]), 'M': (901, [(11, 58), (1, 59)]), 'Q': (901, [(11, 44), (5, 45)]),'H': (901, [(11, 35), (5, 36)])},
    19: {'L': (991, [(10, 128), (1, 129)]), 'M': (991, [(13, 48), (1, 49)]), 'Q': (991, [(13, 42), (5, 43)]),'H': (991, [(13, 38), (5, 39)])},
    20: {'L': (1085, [(10, 141), (1, 142)]), 'M': (1085, [(17, 42), (1, 43)]), 'Q': (1085, [(17, 46), (5, 47)]), 'H': (1085, [(17, 40), (5, 41)])},
    21: {'L': (1156, [(13, 135), (1, 136)]), 'M': (1156, [(17, 50), (1, 51)]), 'Q': (1156, [(17, 42), (6, 43)]), 'H': (1156, [(17, 42), (6, 43)])},
    22: {'L': (1258, [(17, 140)]), 'M': (1258, [(17, 49), (2, 50)]), 'Q': (1258, [(19, 46), (6, 47)]), 'H': (1258, [(19, 46), (6, 47)])},
    23: {'L': (1364, [(17, 144)]), 'M': (1364, [(17, 54), (2, 55)]), 'Q': (1364, [(19, 48), (7, 49)]), 'H': (1364, [(19, 48), (7, 49)])},
    24: {'L': (1474, [(25, 147)]), 'M': (1474, [(21, 51), (2, 52)]), 'Q': (1474, [(21, 47), (6, 48)]), 'H': (1474, [(21, 47), (6, 48)])},
    25: {'L': (1588, [(25, 151)]), 'M': (1588, [(23, 52), (2, 53)]), 'Q': (1588, [(23, 48), (7, 49)]), 'H': (1588, [(23, 48), (7, 49)])},
    26: {'L': (1706, [(25, 157)]), 'M': (1706, [(23, 56), (2, 57)]), 'Q': (1706, [(23, 50), (8, 51)]), 'H': (1706, [(23, 50), (8, 51)])},
    27: {'L': (1828, [(25, 163)]), 'M': (1828, [(25, 57), (2, 58)]), 'Q': (1828, [(25, 52), (8, 53)]), 'H': (1828, [(25, 52), (8, 53)])},
    28: {'L': (1921, [(25, 169)]), 'M': (1921, [(27, 57), (2, 58)]), 'Q': (1921, [(27, 53), (8, 54)]), 'H': (1921, [(27, 53), (8, 54)])},
    29: {'L': (2051, [(25, 175)]), 'M': (2051, [(27, 58), (2, 59)]), 'Q': (2051, [(27, 54), (9, 55)]), 'H': (2051, [(27, 54), (9, 55)])},
    30: {'L': (2185, [(25, 181)]), 'M': (2185, [(29, 58), (2, 59)]), 'Q': (2185, [(29, 55), (9, 56)]), 'H': (2185, [(29, 55), (9, 56)])},
    31: {'L': (2323, [(25, 187)]), 'M': (2323, [(29, 63), (2, 64)]), 'Q': (2323, [(29, 58), (10, 59)]), 'H': (2323, [(29, 58), (10, 59)])},
    32: {'L': (2465, [(25, 194)]), 'M': (2465, [(31, 65), (2, 66)]), 'Q': (2465, [(31, 60), (10, 61)]), 'H': (2465, [(31, 60), (10, 61)])},
    33: {'L': (2611, [(25, 200)]), 'M': (2611, [(31, 70), (2, 71)]), 'Q': (2611, [(31, 63), (11, 64)]), 'H': (2611, [(31, 63), (11, 64)])},
    34: {'L': (2761, [(30, 206)]), 'M': (2761, [(32, 74), (2, 75)]), 'Q': (2761, [(32, 65), (11, 66)]), 'H': (2761, [(32, 65), (11, 66)])},
    35: {'L': (2876, [(30, 213)]), 'M': (2876, [(32, 78), (2, 79)]), 'Q': (2876, [(32, 68), (12, 69)]), 'H': (2876, [(32, 68), (12, 69)])},
    36: {'L': (3034, [(30, 220)]), 'M': (3034, [(34, 81), (2, 82)]), 'Q': (3034, [(34, 71), (12, 72)]), 'H': (3034, [(34, 71), (12, 72)])},
    37: {'L': (3196, [(30, 227)]), 'M': (3196, [(34, 86), (2, 87)]), 'Q': (3196, [(34, 74), (13, 75)]), 'H': (3196, [(34, 74), (13, 75)])},
    38: {'L': (3362, [(30, 234)]), 'M': (3362, [(35, 90), (2, 91)]), 'Q': (3362, [(35, 77), (13, 78)]), 'H': (3362, [(35, 77), (13, 78)])},
    39: {'L': (3537, [(30, 241)]), 'M': (3537, [(35, 95), (2, 96)]), 'Q': (3537, [(35, 81), (14, 82)]), 'H': (3537, [(35, 81), (14, 82)])},
    40: {'L': (3706, [(30, 249)]), 'M': (3706, [(36, 100), (2, 101)]), 'Q': (3706, [(36, 84), (14, 85)]), 'H': (3706, [(36, 84), (14, 85)])}
}


matrice = return_message("test.png")

# for linie in matrice:
#     print(linie)




