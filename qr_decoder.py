import qr_reader as Qr
from QRdrawer import *

def create_image(mat):
    poza = mat
    color_map = {
        0: (255, 255, 255),  # White
        1: (0, 0, 0),  # Black
        8: (128, 128, 128)  # Gray
    }
    image = Image.new("RGB", (len(poza), len(poza)))
    pixels = image.load()
    for i in range(len(poza)):
        for j in range(len(poza)):
            pixels[j, i] = color_map[poza[i][j]]
    scaling_factor = 50
    new_size = (len(poza) * scaling_factor, len(poza) * scaling_factor)
    upscaled_image = image.resize(new_size, Image.NEAREST)
    upscaled_image.save("DEBUGGING.png")
    upscaled_image.show()

def calculate_version(matrice):
    size = len(matrice)
    ver = (size - 21) // 4 + 1
    return ver

def read_format_bits(matrix):
    marime = len(matrix)
    bitString = ""
    for i in range(7):
        bitString += str(matrix[marime - 1 - i][8])
    for i in range(8):
        bitString += str(matrix[8][marime-8+i])
    bitString = int(bitString,2)
    bitString ^= 0b101010000010010
    bitString = format(bitString, '015b')
    bitString = bitString[:5]

    ECL = int(bitString[:2],2)
    mask_id = int(bitString[2:],2)
    if ECL == 0:
        ECL = "M"
    elif ECL == 1:
        ECL = "L"
    elif ECL == 2:
        ECL = "H"
    else:
        ECL = "Q"

    return ECL, mask_id

def create_template(version):
    size = (version - 1) * 4 + 21
    template = [[8] * size for _ in range(size)]
    draw_finders(template, size)
    draw_alignment_patterns(template, version)
    draw_dummy_format_bits(template, size)
    timing_patterns(template, size)
    draw_version_information(template, version, size)
    return template

def unmask(matrix, mask_id,version,ECL):
    template = create_template(version)
    unmasked_matrix = apply_mask(matrix,mask_id,template,ECL)
    return unmasked_matrix

def get_ECC_blocks(version,ECL):
    informatii = QR_BLOCK_INFO[version][ECL]
    nr_blocks = informatii[0]
    codewords = 0
    for tuplu in informatii[1]:
        codewords += tuplu[0] * tuplu[1]
    countECC = nr_blocks - codewords
    return countECC

def remove_ECC(bitString,version,ECL):
    ECCbits = get_ECC_blocks(version, ECL)
    bitString = bitString[:-ECCbits]
    return bitString

def create_codeword_matrix(bitString,version,ECL):
    informatii = QR_BLOCK_INFO[version][ECL]
    nr_coloane = 0
    grupuri = len(informatii[1]) #1 sau 2
    nr_randuri = informatii[1][0][1] #te rog nu ma intreba ce face asta...
    for tuplu in informatii[1]:
        nr_coloane += tuplu[0]
    mat_aux = [["0"]*nr_coloane for i in range(nr_randuri+1)]
    string_aux = bitString[::1]
    for i in range(nr_randuri):
        for j in range(nr_coloane):
            if len(bitString) >= 8:
                mat_aux[i][j] = bitString[:8]
                bitString = bitString[8:]
    if grupuri == 2:
        for j in range(informatii[1][0][0], nr_coloane):
            if len(bitString) >= 8:
                mat_aux[nr_randuri][j] = bitString[:8]
                bitString = bitString[8:]

    # for linie in mat_aux:
    #     for x in linie:
    #         print(hex(int(x,2)),end=" ")
    #     print()

    bitString = string_aux[::1]
    return mat_aux

def read_codeword_matrix(matrix):
    linii = len(matrix)
    coloane = len(matrix[0])
    bitString = ""
    for j in range(coloane):
        for i in range(linii):
            if matrix[i][j] != "0":
                bitString += matrix[i][j]
    # print(bitString)
    return bitString

def remove_paddings(message, version):
    mode_mapping = {
        "0001": "Numeric",
        "0010": "Alphanumeric",
        "0100": "Byte",
        "1000": "Kanji"
    }
    if message[:4] in mode_mapping:
        mode = mode_mapping[message[:4]]
    else:
        mode = "Byte"           #Asta-i un fel de last resort, de fapt nu s-a calculat bine ceva
    message = message[4:]
    if mode == "Numeric":
        char_count_bits = 10 if version <= 9 else 12 if version <= 26 else 14
    elif mode == "Alphanumeric":
        char_count_bits = 9 if version <= 9 else 11 if version <= 26 else 13
    elif mode in ["Byte", "Kanji"]:
        char_count_bits = 8 if version <= 9 else 16
    # print(char_count_bits)
    char_count = int(message[:char_count_bits], 2)
    message = message[char_count_bits:]
    decoded_message = ""
    for i in range(char_count):
        if mode == "Byte":
            if len(message) < 8:
                break
            c = chr(int(message[:8],2))
            decoded_message += c
            message = message[8:]
    # print(decoded_message)
    return decoded_message


def citim_informatia(matrix,version):
    template = create_template(version)
    path = zigzag(template)
    bitString = ""
    for tuplu in path:
        i,j = tuplu
        bitString += str(matrix[i][j])
    return bitString
def return_message(img_path):
    matrice = Qr.main(img_path)
    # print("Read matrix length:", len(matrice),len(matrice[0]))
    # with open('binary_file.out', "w") as g:
    #     for row in matrice:
    #         line = ' '.join(map(str, row))
    #         g.write(line + '\n')

    version = calculate_version(matrice)
    ECL, mask_id = read_format_bits(matrice)
    matrice = unmask(matrice, mask_id, version, ECL)
    message = citim_informatia(matrice,version)
    message = remove_ECC(message,version,ECL)
    message = read_codeword_matrix(create_codeword_matrix(message,version,ECL))
    message = remove_paddings(message,version)
    return message


QR_BLOCK_INFO = {1: {'L': (26, [(1, 19)]),'M': (26, [(1, 16)]),'Q': (26, [(1, 13)]),'H': (26, [(1, 9)])},
                 2: {'L': (44, [(1, 34)]), 'M': (44, [(1, 28)]), 'Q': (44, [(1, 22)]), 'H': (44, [(1, 16)])},
                 3: {'L': (70, [(1, 55)]),'M': (70, [(1, 44)]),'Q': (70, [(2, 17)]),'H': (70, [(2, 13)])},
                 4: {'L': (100, [(1, 80)]),'M': (100, [(2, 32)]),'Q': (100, [(2, 24)]),'H': (100, [(4, 9)])},
                 5: {'L': (134, [(1, 108)]),'M': (134, [(2, 43)]),'Q': (134, [(2, 15), (2, 16)]),'H': (134, [(2, 11), (2, 12)])},
                 6: {'L': (172, [(2, 68)]),'M': (172, [(4, 27)]),'Q': (172, [(4, 19)]),'H': (172, [(4, 15)])},
                 7: {'L': (196, [(2, 78)]),'M': (196, [(4, 31)]),'Q': (196, [(2, 14), (4, 15)]),'H': (196, [(4, 13), (1, 14)])},
                 8: {'L': (242, [(2, 97)]),'M': (242, [(2, 38), (2, 39)]),'Q': (242, [(4, 18), (2, 19)]),'H': (242, [(4, 14), (2, 15)])},
                 9: {'L': (294, [(2, 116)]),'M': (294, [(3, 36), (2, 37)]),'Q': (294, [(4, 16), (4, 17)]),'H': (294, [(4, 12), (4, 13)])},
                 10: {'L': (384, [(2, 68), (2, 69)]),'M': (384, [(4, 43), (1, 44)]),'Q': (384, [(6, 19), (2, 20)]),'H': (384, [(6, 15), (2, 16)])},
                 11: {'L': (408, [(4, 81)]),'M': (408, [(1, 50), (4, 51)]),'Q': (408, [(4, 22), (4, 23)]),'H': (408, [(3, 12), (8, 13)])},
                 12: {'L': (468, [(2, 92), (2, 93)]),'M': (468, [(6, 36), (2, 37)]),'Q': (468, [(4, 20), (6, 21)]),'H': (468, [(7, 14), (4, 15)])},
                 13: {'L': (532, [(4, 107)]),'M': (532, [(8, 37), (1, 38)]),'Q': (532, [(8, 20), (4, 21)]),'H': (532, [(12, 11), (4, 12)])},
                 14: {'L': (584, [(3, 115), (1, 116)]),'M': (584, [(4, 40), (5, 41)]),'Q': (584, [(11, 16), (5, 17)]),'H': (584, [(11, 12), (5, 13)])},
                 15: {'L': (660, [(5, 87), (1, 88)]),'M': (660, [(5, 41), (5, 42)]),'Q': (660, [(5, 24), (7, 25)]),'H': (660, [(11, 12), (7, 13)])},
                 16: {'L': (738, [(5, 98), (1, 99)]),'M': (738, [(7, 45), (3, 46)]),'Q': (738, [(15, 19), (2, 20)]),'H': (738, [(3, 15), (13, 16)])},
                 17: {'L': (816, [(1, 107), (5, 108)]),'M': (816, [(10, 46), (1, 47)]),'Q': (816, [(1, 22), (15, 23)]),'H': (816, [(2, 14), (17, 15)])},
                 18: {'L': (906, [(5, 120), (1, 121)]),'M': (906, [(9, 43), (4, 44)]),'Q': (906, [(17, 22), (1, 23)]),'H': (906, [(2, 14), (19, 15)])},
                 19: {'L': (994, [(3, 113), (4, 114)]),'M': (994, [(3, 44), (11, 45)]),'Q': (994, [(17, 21), (4, 22)]),'H': (994, [(9, 13), (16, 14)])},
                 20: {'L': (1088, [(3, 107), (5, 108)]),'M': (1088, [(3, 41), (13, 42)]),'Q': (1088, [(15, 24), (5, 25)]),'H': (1088, [(15, 15), (10, 16)])},
                 21: {'L': (1160, [(4, 116), (4, 117)]),'M': (1160, [(17, 42)]),'Q': (1160, [(17, 22), (6, 23)]),'H': (1160, [(19, 16), (6, 17)])},
                 22: {'L': (1260, [(2, 111), (7, 112)]),'M': (1260, [(17, 46)]),'Q': (1260, [(7, 24), (16, 25)]),'H': (1260, [(34, 13)])},
                 23: {'L': (1368, [(4, 121), (5, 122)]),'M': (1368, [(4, 47), (14, 48)]),'Q': (1368, [(11, 24), (14, 25)]),'H': (1368, [(16, 15), (14, 16)])},

                 #DE AICI IN JOS AM COPIAT DE MAI JOS, N-AM MAI CALCULAT MANUAL!!!
                 24: {'L': (1474, [(6, 117), (4, 118)]),'M': (1474, [(6, 45), (14, 46)]),'Q': (1474, [(11, 24), (16, 25)]),'H': (1474, [(30, 16), (2, 17)])},
                 25: {'L': (1588, [(8, 106), (4, 107)]),'M': (1588, [(8, 47), (13, 48)]),'Q': (1588, [(7, 24), (22, 25)]),'H': (1588, [(22, 15), (13, 16)])},
                 26: {'L': (1706, [(10, 114), (2, 115)]),'M': (1706, [(19, 46), (4, 47)]),'Q': (1706, [(28, 22), (6, 23)]),'H': (1706, [(33, 16), (4, 17)])},
                 27: {'L': (1828, [(8, 122), (4, 123)]),'M': (1828, [(22, 45), (3, 46)]),'Q': (1828, [(8, 23), (26, 24)]),'H': (1828, [(12, 15), (28, 16)])},
                 28: {'L': (1921, [(3, 117), (10, 118)]),'M': (1921, [(3, 45), (23, 46)]),'Q': (1921, [(4, 24), (31, 25)]),'H': (1921, [(11, 15), (31, 16)])},
                 29: {'L': (2051, [(7, 116), (7, 117)]),'M': (2051, [(21, 45), (7, 46)]),'Q': (2051, [(1, 23), (37, 24)]),'H': (2051, [(19, 15), (26, 16)])},
                 30: {'L': (2185, [(5, 115), (10, 116)]),'M': (2185, [(19, 47), (10, 48)]),'Q': (2185, [(15, 24), (25, 25)]),'H': (2185, [(23, 15), (25, 16)])},
                 31: {'L': (2323, [(13, 115), (3, 116)]),'M': (2323, [(2, 46), (29, 47)]),'Q': (2323, [(42, 24), (1, 25)]),'H': (2323, [(23, 15), (28, 16)])},
                 32: {'L': (2465, [(17, 115)]),'M': (2465, [(10, 46), (23, 47)]),'Q': (2465, [(10, 24), (35, 25)]),'H': (2465, [(19, 15), (35, 16)])},
                 33: {'L': (2611, [(17, 115), (1, 116)]),'M': (2611, [(14, 46), (21, 47)]),'Q': (2611, [(29, 24), (19, 25)]),'H': (2611, [(11, 15), (46, 16)])},
                 34: {'L': (2761, [(13, 115), (6, 116)]),'M': (2761, [(14, 46), (23, 47)]),'Q': (2761, [(44, 24), (7, 25)]),'H': (2761, [(59, 16), (1, 17)])},
                 35: {'L': (2876, [(12, 121), (7, 122)]),'M': (2876, [(12, 47), (26, 48)]),'Q': (2876, [(39, 24), (14, 25)]),'H': (2876, [(22, 15), (41, 16)])},
                 36: {'L': (3034, [(6, 121), (14, 122)]),'M': (3034, [(6, 47), (34, 48)]),'Q': (3034, [(46, 24), (10, 25)]),'H': (3034, [(2, 15), (64, 16)])},
                 37: {'L': (3196, [(17, 122), (4, 123)]),'M': (3196, [(29, 46), (14, 47)]),'Q': (3196, [(49, 24), (10, 25)]),'H': (3196, [(24, 15), (46, 16)])},
                 38: {'L': (3362, [(4, 122), (18, 123)]),'M': (3362, [(13, 46), (32, 47)]),'Q': (3362, [(48, 24), (14, 25)]),'H': (3362, [(42, 15), (32, 16)])},
                 39: {'L': (3537, [(20, 117), (4, 118)]),'M': (3537, [(40, 47), (7, 48)]),'Q': (3537, [(43, 24), (22, 25)]),'H': (3537, [(10, 15), (67, 16)])},
                 40: {'L': (3706, [(19, 118), (6, 119)]),'M': (3706, [(18, 47), (31, 48)]),'Q': (3706, [(34, 24), (34, 25)]),'H': (3706, [(20, 15), (61, 16)])}}

# path = input("Path to QR code: ")
path = "test.png"
print(return_message(path))






# QR_BLOCK_INFO = {1: {'L': (7, [(1, 19)]),'M': (10, [(1, 16)]),'Q': (13, [(1, 13)]),'H': (17, [(1, 9)])},
# 2: {'L': (10, [(1, 34)]), 'M': (16, [(1, 28)]), 'Q': (22, [(1, 22)]), 'H': (28, [(1, 16)])},
# 3: {'L': (15, [(1, 55)]),'M': (26, [(1, 44)]),'Q': (18, [(2, 17)]),'H': (22, [(2, 13)])},
# 4: {'L': (20, [(1, 80)]),'M': (18, [(2, 32)]),'Q': (26, [(2, 24)]),'H': (16, [(4, 9)])},
# 5: {'L': (26, [(1, 108)]),'M': (24, [(2, 43)]),'Q': (18, [(2, 15), (2, 16)]),'H': (22, [(2, 11), (2, 12)])},
# 6: {'L': (18, [(2, 68)]),'M': (16, [(4, 27)]),'Q': (24, [(4, 19)]),'H': (28, [(4, 15)])},
# 7: {'L': (20, [(2, 78)]),'M': (18, [(4, 31)]),'Q': (18, [(2, 14), (4, 15)]),'H': (26, [(4, 13), (1, 14)])},
# 8: {'L': (24, [(2, 97)]),'M': (22, [(2, 38), (2, 39)]),'Q': (22, [(4, 18), (2, 19)]),'H': (26, [(4, 14), (2, 15)])},
# 9: {'L': (30, [(2, 116)]),'M': (22, [(3, 36), (2, 37)]),'Q': (20, [(4, 16), (4, 17)]),'H': (24, [(4, 12), (4, 13)])},
# 10: {'L': (18, [(2, 68), (2, 69)]),'M': (26, [(4, 43), (1, 44)]),'Q': (24, [(6, 19), (2, 20)]),'H': (28, [(6, 15), (2, 16)])},
# 11: {'L': (20, [(4, 81)]),'M': (30, [(1, 50), (4, 51)]),'Q': (28, [(4, 22), (4, 23)]),'H': (24, [(3, 12), (8, 13)])},
# 12: {'L': (24, [(2, 92), (2, 93)]),'M': (22, [(6, 36), (2, 37)]),'Q': (26, [(4, 20), (6, 21)]),'H': (28, [(7, 14), (4, 15)])},
# 13: {'L': (26, [(4, 107)]),'M': (22, [(8, 37), (1, 38)]),'Q': (24, [(8, 20), (4, 21)]),'H': (22, [(12, 11), (4, 12)])},
# 14: {'L': (30, [(3, 115), (1, 116)]),'M': (24, [(4, 40), (5, 41)]),'Q': (20, [(11, 16), (5, 17)]),'H': (24, [(11, 12), (5, 13)])},
# 15: {'L': (22, [(5, 87), (1, 88)]),'M': (24, [(5, 41), (5, 42)]),'Q': (30, [(5, 24), (7, 25)]),'H': (24, [(11, 12), (7, 13)])},
# 16: {'L': (24, [(5, 98), (1, 99)]),'M': (28, [(7, 45), (3, 46)]),'Q': (24, [(15, 19), (2, 20)]),'H': (30, [(3, 15), (13, 16)])},
# 17: {'L': (28, [(1, 107), (5, 108)]),'M': (28, [(10, 46), (1, 47)]),'Q': (28, [(1, 22), (15, 23)]),'H': (28, [(2, 14), (17, 15)])},
# 18: {'L': (30, [(5, 120), (1, 121)]),'M': (26, [(9, 43), (4, 44)]),'Q': (28, [(17, 22), (1, 23)]),'H': (28, [(2, 14), (19, 15)])},
# 19: {'L': (28, [(3, 113), (4, 114)]),'M': (26, [(3, 44), (11, 45)]),'Q': (26, [(17, 21), (4, 22)]),'H': (26, [(9, 13), (16, 14)])},
# 20: {'L': (28, [(3, 107), (5, 108)]),'M': (26, [(3, 41), (13, 42)]),'Q': (30, [(15, 24), (5, 25)]),'H': (28, [(15, 15), (10, 16)])},
# 21: {'L': (28, [(4, 116), (4, 117)]),'M': (26, [(17, 42)]),'Q': (28, [(17, 22), (6, 23)]),'H': (30, [(19, 16), (6, 17)])},
# 22: {'L': (28, [(2, 111), (7, 112)]),'M': (28, [(17, 46)]),'Q': (30, [(7, 24), (16, 25)]),'H': (24, [(34, 13)])},
# 23: {'L': (30, [(4, 121), (5, 122)]),'M': (28, [(4, 47), (14, 48)]),'Q': (30, [(11, 24), (14, 25)]),'H': (30, [(16, 15), (14, 16)])},
#
# #DE AICI IN JOS AM COPIAT DE MAI JOS, N-AM MAI CALCULAT MANUAL!!!
# 24: {'L': (1474, [(6, 117), (4, 118)]),'M': (1474, [(6, 45), (14, 46)]),'Q': (1474, [(11, 24), (16, 25)]),'H': (1474, [(30, 16), (2, 17)])},
# 25: {'L': (1588, [(8, 106), (4, 107)]),'M': (1588, [(8, 47), (13, 48)]),'Q': (1588, [(7, 24), (22, 25)]),'H': (1588, [(22, 15), (13, 16)])},
# 26: {'L': (1706, [(10, 114), (2, 115)]),'M': (1706, [(19, 46), (4, 47)]),'Q': (1706, [(28, 22), (6, 23)]),'H': (1706, [(33, 16), (4, 17)])},
# 27: {'L': (1828, [(8, 122), (4, 123)]),'M': (1828, [(22, 45), (3, 46)]),'Q': (1828, [(8, 23), (26, 24)]),'H': (1828, [(12, 15), (28, 16)])},
# 28: {'L': (1921, [(3, 117), (10, 118)]),'M': (1921, [(3, 45), (23, 46)]),'Q': (1921, [(4, 24), (31, 25)]),'H': (1921, [(11, 15), (31, 16)])},
# 29: {'L': (2051, [(7, 116), (7, 117)]),'M': (2051, [(21, 45), (7, 46)]),'Q': (2051, [(1, 23), (37, 24)]),'H': (2051, [(19, 15), (26, 16)])},
# 30: {'L': (2185, [(5, 115), (10, 116)]),'M': (2185, [(19, 47), (10, 48)]),'Q': (2185, [(15, 24), (25, 25)]),'H': (2185, [(23, 15), (25, 16)])},
# 31: {'L': (2323, [(13, 115), (3, 116)]),'M': (2323, [(2, 46), (29, 47)]),'Q': (2323, [(42, 24), (1, 25)]),'H': (2323, [(23, 15), (28, 16)])},
# 32: {'L': (2465, [(17, 115)]),'M': (2465, [(10, 46), (23, 47)]),'Q': (2465, [(10, 24), (35, 25)]),'H': (2465, [(19, 15), (35, 16)])},
# 33: {'L': (2611, [(17, 115), (1, 116)]),'M': (2611, [(14, 46), (21, 47)]),'Q': (2611, [(29, 24), (19, 25)]),'H': (2611, [(11, 15), (46, 16)])},
# 34: {'L': (2761, [(13, 115), (6, 116)]),'M': (2761, [(14, 46), (23, 47)]),'Q': (2761, [(44, 24), (7, 25)]),'H': (2761, [(59, 16), (1, 17)])},
# 35: {'L': (2876, [(12, 121), (7, 122)]),'M': (2876, [(12, 47), (26, 48)]),'Q': (2876, [(39, 24), (14, 25)]),'H': (2876, [(22, 15), (41, 16)])},
# 36: {'L': (3034, [(6, 121), (14, 122)]),'M': (3034, [(6, 47), (34, 48)]),'Q': (3034, [(46, 24), (10, 25)]),'H': (3034, [(2, 15), (64, 16)])},
# 37: {'L': (3196, [(17, 122), (4, 123)]),'M': (3196, [(29, 46), (14, 47)]),'Q': (3196, [(49, 24), (10, 25)]),'H': (3196, [(24, 15), (46, 16)])},
# 38: {'L': (3362, [(4, 122), (18, 123)]),'M': (3362, [(13, 46), (32, 47)]),'Q': (3362, [(48, 24), (14, 25)]),'H': (3362, [(42, 15), (32, 16)])},
# 39: {'L': (3537, [(20, 117), (4, 118)]),'M': (3537, [(40, 47), (7, 48)]),'Q': (3537, [(43, 24), (22, 25)]),'H': (3537, [(10, 15), (67, 16)])},
# 40: {'L': (3706, [(19, 118), (6, 119)]),'M': (3706, [(18, 47), (31, 48)]),'Q': (3706, [(34, 24), (34, 25)]),'H': (3706, [(20, 15), (61, 16)])}}

# def get_ECC_blocks(version,ECL):
#     informatii = QR_BLOCK_INFO[version][ECL]
#     nr_blocks = 0
#     codewords = 0
#     for tuplu in informatii[1]:
#         codewords += tuplu[0] * tuplu[1]
#         nr_blocks += tuplu[0]
#     countECC = nr_blocks * informatii[0]
#     return countECC